import Foundation

let N = Int(readLine()!)! // 전체 사람(노드)의 수
let input = readLine()!.split(separator: " ").map {Int(String($0))!}
let startNode = input[0] // 시작 노드
let endNode = input[1] // 목표 노드
let M = Int(readLine()!)! // 부모 자실들 간의 관계(간선)의 수

var graph : [[Int]] = Array(repeating: [], count: N+1) // 그래프 선언 및 초기화
var checkVisited = Array(repeating: 0, count: N+1) // 방문 저장

for _ in 0..<M{
    // 그래프 입력 받기. 각 노드의 형제 노드 저장
    let relation = readLine()!.split(separator: " ").map {Int(String($0))!}
    let a = relation[0]
    let b = relation[1]
    graph[a].append(b)
    graph[b].append(a)
    graph[a].sort()
    graph[b].sort()
}
print(graph)
// BFS로 구현
func bfs(_ start: Int,_ end: Int) -> Int {
    
    var needVisitQueue : [Int] = [start]  // 방문해야 하는 노드 저장 (= 해당 노드의 형제 노드)
                                          // 출발 노드로 초기화
    var visitedQueue = [Int]() // 방문한 노드 저장
   
    while !needVisitQueue.isEmpty { // 방문해야 하는 노드가 없을 때 까지 반복
        
        let node = needVisitQueue.removeFirst() // 첫 노드 삭제 (FIFO)
        
        if !visitedQueue.contains(node) { // 방문한 노드 목록에 현재 노드가 없다면
            visitedQueue.append(node) // 방문한 노드 목록에 현재 노드 추가
            print("노드: ", node)
            let availablePath = graph[node] ?? [] // [2,3]
            needVisitQueue += availablePath
            
            // 촌수 더하기
            for i in availablePath {
                if !visitedQueue.contains(i){
                    checkVisited[i] = checkVisited[node] + 1
                    print("촌수 계산: ", i, checkVisited)
                }
            }
        }
    }
    return checkVisited[end]
    
}
let result = bfs(startNode, endNode) != 0 ? bfs(startNode, endNode) : -1
print(result)
