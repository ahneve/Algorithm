import java.util.*;

class Solution {
    public int[] solution(int N, int[] stages) {
        int[] answer = new int[N];
        
        double[][] count = new double[N+1][2];
        
        for(int i=0; i<N+1; i++){
            count[i][0] = i+1;
            count[i][1] = 0;
        }
        
        for(int i=0; i<stages.length; i++){
            int num = stages[i];
            count[num-1][1]++;
        }
        
        //실패율
        double total = stages.length;
        double temp = count[0][1];
        for(int i=0; i<N+1; i++){
            if(i!=0){
                total = total - temp;
                temp = count[i][1]; 
            }
            count[i][1] = count[i][1]/total;
            
            if(Double.isNaN(count[i][1])){
                count[i][1] = -1;
            }
        }
        
        double[][] count_new = new double[N][2];
        for(int i=0; i<N; i++) {
            count_new[i][0] = count[i][0];
            count_new[i][1] = count[i][1];
        }
        Arrays.sort(count_new, (o1, o2) -> { 
            if(o1[1] == o2[1] ){ 
                if(o1[0]<o2[0]){
                    return 1;
                } else {
                    return -1;
                }}
            else{ 
                return Double.compare(o1[1],o2[1]); 
        }
                
        });

        for(int i=0; i<N; i++){
            answer[i] = (int)count_new[N-i-1][0];
        }
        
        System.out.println(java.util.Arrays.deepToString(count_new));
        return answer;
    }
}